@@ -1,69 +0,0 @@
리액트 교육 
<일차>
javascript 
 대표적 :  Express framework
<github 사용>
1.깃허브 가입
  계정: bkin@tysystems.com/인1!, 
  이름 : byoungkabin 
2.repository  만들기
3.github   desktop설치 및 로그인
4. 2에서 만든 repository clone
5.vscode dptj  clone gks  repository 열기
-----------------------
@@ -1,131 +1,88 @@
// 1. 변수 선언
// var let const
// 실무에서는 대부분  const 사용, 재할당이 필요한 경우에만  let을 사용함

// 1)유효범위
//var :  함수단위  scope
// let, const :  블록단위  scope
// 2)재할당 가능
// var, let :  가능
// const :  불가능
// 1. 유효범위(scope)
// var : 함수단위scope
// let, const : 블록단위
// 2. 재할당 가능
// var, let : 가능
// const : 불가능

for (var i = 0; i < 5; i++) {
  console.log("안쪽" + i);
}
console.log("바깥쪽" + i); // 5를 출력함.

console.log("바깥쪽" + i);

for (let j = 0; j < 5; j++) {
  console.log("안쪽" + j); // 오류발생함.
  console.log("안쪽" + j);
}
console.log("바깥쪽" + j); //실행시 오류 : VM35:9 Uncaught ReferenceError: j is not defined at <anonymous>:9:19
console.log("바깥쪽" + j);

hoisting;
tdz;

// hoisting
// tdz : let, const로 사용함.  https://ui.toast.com/weekly-pick/ko_20191014
console.log(a);
var a = 5;
console.log(a);

console.log(b);
let b = 5;
let b = 6;
console.log(b);

// -----------------------------
// 2. 선언방법
// 함수 선언식, 함수 표현식
// const : 재할당 불가능
// let : 재할당 가능

//함수 선언식
// hoisting 이 되기 때문에 아래같이 해도 오류가 발생하지 않음
add(4, 5);
// 함수선언식
add(3, 4);
function add(a, b) {
  return a + b;
}

//함수 표현식
// 오류가 발생
minus(4.5);

// 함수 표현식
minus(6, 4);
var minus = function (a, b) {
  return a - b;
};

// 1) 화살표 함수
minus2(a, b);
const minus2 = (a, b) => {
minus2(1);
const minus2 = (a, b = 5) => {
  return a - b;
};
// 아래 위가 동일한 의미,  return 생략 가능.
//화살표 함수 실제 많이 사용하는 사례
minus3(a, b);
const minus3 = (a, b) => a - b;

// 2) 비구조할당
// javascript 객체

const person1 = {
  name: "jason",
  age: 28,
  major: "Computer",
};
console.log("이름은 " + person1.name + "입니다.");
console.log("나이는 " + person1.age + "세 입니다.");
console.log("전공은 " + person1.major + "전공입니다.");

// => 비구조화 할당으로 변경(객체, 배열 등 사용 )
const person1 = {
  name1: "jason",
  age: 28,
  major: "Computer",
};
const { name1, age, major } = person1;

console.log("이름은 " + name1 + "입니다.");
console.log("나이는 " + age + "세 입니다.");
console.log("전공은 " + major + "전공입니다.");

//배열의 비구조화 할당 예
const arr1 = [1, 2, 3, 4];
const [first, second] = arr1; // arr[0]=1, arr[1] =2 의 의미

// 3 디폴트 파라미터 기능 = 자주 사용하지 않음

// 4 템플릿 리터럴 // ``와  ${변수명}으로 표기
// console.log("이름은 "+ name1 +"입니다.")
// => console.log(`이름은 ${name1} 입니다.`)
const person1 = {
  name1: "jason",
  age: 28,
  major: "Computer",
};
const { name1, age, major } = person1;
console.log(`
            이름은 ${name1} 입니다.
            나이는 ${age} 세 입니다.
            전공은 ${major} 전공입니다.
            `);

//객체, 배열의 값을 복사하여 사용 가능,  ...
//const person2 = {...person1, age:24}  // person1 의 값을 넣어 주고  age는 24로 변경, 순서가 중요
//const arr2[] = [...arr1]

//
const person1 = {
  name1: "jason",
  age: 28,
  age: 20,
  major: "Computer",
};
const locationInfo = {
  country: "Korea",
  city: "Seoul",
};

const subMajor = "Math";
const person2 = {
  ...person1,
  ...locationInfo,
  age: 24,
  subMajor,
};
console.log(person2.name1, person2.city);

// 3)원시 타입, 참조타입
//참조타입 : 객체 , 배열, 함수
//원시타입 : 숫자, 스트링, boolean, null, undefined
// [Java] - 깊은 복사(Deep Copy) vs 얕은 복사(Shallow Copy)
// [JavaScript] 얕은 복사(shallow copy) vs 깊은 복사(deep copy)
const { name1, age, major } = person1;

console.log("이름은 " + name1 + "입니다.");
console.log("나이는 " + age + "세 입니다.");
console.log("전공은 " + major + "전공 입니다.");
// 템플릿 리터럴
console.log(`
    이름은 ${name1}입니다. 
    나이는 ${age}세입니다.
    전공은 ${major}전공 입니다.
`);

const arr1 = [1, 2, 3, 4];
// const first = arr1[0];
// const second = arr1[1]
const [first, second] = arr;

const arr2 = [0, ...arr1, 5];


<리액트>
 facebook에서 개발
 jquery -> react

 . dom에 직접 접근하는 방식에서  data바인딩으로 패러다임 바뀜, 컴포넌트 기반의  facebook에서
 
 <환경설정>
 Node.js : 16.15버전 설치
 
 vscode
 github desktop설치
 eslint : vs code에서  js문법 검사 microsoft
 prettier : vscode에서 코드 formatter
 live server : 

<react 실습환경 구성>
vscode 에서  보기 - 터미널
// node --version 설치된 버전 보기

// npx create-react-app react-app : react 폴더 및  app생성 
// cd react-app : 폴더 위치 이동
  // npm start : 서버 시작  
  // ctrl + c : 서버 종료 
  // npm run build : 배포할때  
  // webpack :번들러   
  // babel : 구버전 브라우저를 위해서 최신 문법을 예전 문법으로 변형 
  // polyfill :  구버전 브라우저에 없는 함수를 채워줌


 
강사 github
  https://github.com/jackiehoon/dongyang-react-study

html에 리액트 추가하기
https://ko.reactjs.org/docs/add-react-to-a-website.html 참조


<JSX >
components는 명명규칙 : 첫글자는 대문자 
리턴값은 하나만 있어야 함.  <div>로 묶어줌

self closing이 필요함. 예 <input /> <br />
 주석 표기는 (/* ... */}, 사용예 {/* 주석은 이렇게 */}


<useState사용법>

 import { useState } from "react";

const Counter = () => {
  const [number, setNumber] = useState(5);

5/16일 교육

// 많이 사용하는 개념
useState
useEffect
useReducer

// 함수의 선언을 최소화 average.jsx 참조
useMemo
useCallback

// useRef 많이 사용 에리멘트에 직접 접근하여 사용하고 싶을때,   inputfile.jsx 참조
local 변수로도 사용  (iterationsampel.jsx)
.current 을 사용
useRef

style component  : StyledComponent.jsx 참조
코드 실행 안되면 :  npm i stlyed-components 실행

<5/16일 교육 내용 10장>
1. 컴포넌트 분리 
  : item.jsx, form.jsx
2. 체크여부  data 저장
 : item 에  isDone :true or false   설정
   <Item />의  checkbox checked값을  data의  isDone과 연결
   아이템이 추가되면 기본적으로 선택되서 추가됨.

3. data에 따른 styling


<라우팅 13장>
Nuxt, Next, Nest ?
서버와의 통신

<비동기 14장>
set함수는 비동기 함수임
콜백함수를 사용해야 동기식으로 표현, (예:setNumber((prev)=> prev+1))

비동기는 api를 사용할때 많이 사용, 이전에는 콜백함수로 표현을 많이 함.(14장 358페이지)

promise : es6에 도입된 기능
 - resolve(성공) reject(실패) 함수가 있음

*****
async / await 개념이 나옴 es8 : promise기반 비동기 함수에 사용. 14장 360페이지

터미널에서 아래 명령어 실행
ctrl + c로 현재 화면 종료후 아래 명령어 입력
npm i axios




